/* tslint:disable */
/* eslint-disable */
/**
 * server
 * server
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LoopbackCount,
    LoopbackCountFromJSON,
    LoopbackCountToJSON,
    NewReviewResponseInReview,
    NewReviewResponseInReviewFromJSON,
    NewReviewResponseInReviewToJSON,
    ReviewResponse,
    ReviewResponseFromJSON,
    ReviewResponseToJSON,
    ReviewResponsePartial,
    ReviewResponsePartialFromJSON,
    ReviewResponsePartialToJSON,
} from '../models';

export type ReviewResponseControllerCreateRequest = {
    id: string;
    newReviewResponseInReview?: NewReviewResponseInReview;
}

export type ReviewResponseControllerDeleteRequest = {
    id: string;
    where?: runtime.HTTPQuery;
}

export type ReviewResponseControllerReplaceRequest = {
    id: string;
    where?: runtime.HTTPQuery;
    reviewResponsePartial?: ReviewResponsePartial;
}

export type ReviewResponseControllerUpdateRequest = {
    id: string;
    where?: runtime.HTTPQuery;
    reviewResponsePartial?: ReviewResponsePartial;
}

/**
 *
 */
export class ReviewResponseControllerApi extends runtime.BaseAPI {

    /**
     */
    async reviewResponseControllerCreateRaw(requestParameters: ReviewResponseControllerCreateRequest): Promise<runtime.ApiResponse<ReviewResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reviewResponseControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reviews/{id}/responses`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewReviewResponseInReviewToJSON(requestParameters.newReviewResponseInReview),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewResponseFromJSON(jsonValue));
    }

    /**
     */
    async reviewResponseControllerCreate(requestParameters: ReviewResponseControllerCreateRequest): Promise<ReviewResponse> {
        const response = await this.reviewResponseControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async reviewResponseControllerDeleteRaw(requestParameters: ReviewResponseControllerDeleteRequest): Promise<runtime.ApiResponse<LoopbackCount>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reviewResponseControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reviews/{id}/responses`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoopbackCountFromJSON(jsonValue));
    }

    /**
     */
    async reviewResponseControllerDelete(requestParameters: ReviewResponseControllerDeleteRequest): Promise<LoopbackCount> {
        const response = await this.reviewResponseControllerDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async reviewResponseControllerReplaceRaw(requestParameters: ReviewResponseControllerReplaceRequest): Promise<runtime.ApiResponse<LoopbackCount>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reviewResponseControllerReplace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reviews/{id}/responses`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewResponsePartialToJSON(requestParameters.reviewResponsePartial),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoopbackCountFromJSON(jsonValue));
    }

    /**
     */
    async reviewResponseControllerReplace(requestParameters: ReviewResponseControllerReplaceRequest): Promise<LoopbackCount> {
        const response = await this.reviewResponseControllerReplaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async reviewResponseControllerUpdateRaw(requestParameters: ReviewResponseControllerUpdateRequest): Promise<runtime.ApiResponse<LoopbackCount>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reviewResponseControllerUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reviews/{id}/responses`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewResponsePartialToJSON(requestParameters.reviewResponsePartial),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoopbackCountFromJSON(jsonValue));
    }

    /**
     */
    async reviewResponseControllerUpdate(requestParameters: ReviewResponseControllerUpdateRequest): Promise<LoopbackCount> {
        const response = await this.reviewResponseControllerUpdateRaw(requestParameters);
        return await response.value();
    }

}
