/* tslint:disable */
/* eslint-disable */
/**
 * server
 * server
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LoopbackCount,
    LoopbackCountFromJSON,
    LoopbackCountToJSON,
    NewReviewInRestaurant,
    NewReviewInRestaurantFromJSON,
    NewReviewInRestaurantToJSON,
    Review,
    ReviewFromJSON,
    ReviewToJSON,
    ReviewWithRelations,
    ReviewWithRelationsFromJSON,
    ReviewWithRelationsToJSON,
} from '../models';

export interface RestaurantReviewControllerCreateRequest {
    id: string;
    newReviewInRestaurant?: NewReviewInRestaurant;
}

export interface RestaurantReviewControllerDeleteRequest {
    id: string;
    where?: { [key: string]: object; };
}

export interface RestaurantReviewControllerFindRequest {
    id: string;
    filter?: { [key: string]: object; };
}

/**
 *
 */
export class RestaurantReviewControllerApi extends runtime.BaseAPI {

    /**
     */
    async restaurantReviewControllerCreateRaw(requestParameters: RestaurantReviewControllerCreateRequest): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling restaurantReviewControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/restaurants/{id}/reviews`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewReviewInRestaurantToJSON(requestParameters.newReviewInRestaurant),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewFromJSON(jsonValue));
    }

    /**
     */
    async restaurantReviewControllerCreate(requestParameters: RestaurantReviewControllerCreateRequest): Promise<Review> {
        const response = await this.restaurantReviewControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async restaurantReviewControllerDeleteRaw(requestParameters: RestaurantReviewControllerDeleteRequest): Promise<runtime.ApiResponse<LoopbackCount>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling restaurantReviewControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/restaurants/{id}/reviews`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoopbackCountFromJSON(jsonValue));
    }

    /**
     */
    async restaurantReviewControllerDelete(requestParameters: RestaurantReviewControllerDeleteRequest): Promise<LoopbackCount> {
        const response = await this.restaurantReviewControllerDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async restaurantReviewControllerFindRaw(requestParameters: RestaurantReviewControllerFindRequest): Promise<runtime.ApiResponse<Array<ReviewWithRelations>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling restaurantReviewControllerFind.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/restaurants/{id}/reviews`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReviewWithRelationsFromJSON));
    }

    /**
     */
    async restaurantReviewControllerFind(requestParameters: RestaurantReviewControllerFindRequest): Promise<Array<ReviewWithRelations>> {
        const response = await this.restaurantReviewControllerFindRaw(requestParameters);
        return await response.value();
    }

}
