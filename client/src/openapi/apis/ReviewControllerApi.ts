/* tslint:disable */
/* eslint-disable */
/**
 * server
 * server
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LoopbackCount,
    LoopbackCountFromJSON,
    LoopbackCountToJSON,
    Review,
    ReviewFromJSON,
    ReviewToJSON,
    ReviewFilter,
    ReviewFilterFromJSON,
    ReviewFilterToJSON,
    ReviewFilter1,
    ReviewFilter1FromJSON,
    ReviewFilter1ToJSON,
    ReviewPartial,
    ReviewPartialFromJSON,
    ReviewPartialToJSON,
    ReviewWithRelations,
    ReviewWithRelationsFromJSON,
    ReviewWithRelationsToJSON,
} from '../models';

export interface ReviewControllerCountRequest {
    where?: { [key: string]: object; };
}

export interface ReviewControllerDeleteByIdRequest {
    id: string;
}

export interface ReviewControllerFindRequest {
    filter?: ReviewFilter1;
}

export interface ReviewControllerFindByIdRequest {
    id: string;
    filter?: ReviewFilter;
}

export interface ReviewControllerReplaceByIdRequest {
    id: string;
    review?: Review;
}

export interface ReviewControllerUpdateByIdRequest {
    id: string;
    reviewPartial?: ReviewPartial;
}

/**
 * 
 */
export class ReviewControllerApi extends runtime.BaseAPI {

    /**
     */
    async reviewControllerCountRaw(requestParameters: ReviewControllerCountRequest): Promise<runtime.ApiResponse<LoopbackCount>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reviews/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoopbackCountFromJSON(jsonValue));
    }

    /**
     */
    async reviewControllerCount(requestParameters: ReviewControllerCountRequest): Promise<LoopbackCount> {
        const response = await this.reviewControllerCountRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async reviewControllerDeleteByIdRaw(requestParameters: ReviewControllerDeleteByIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reviewControllerDeleteById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reviews/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async reviewControllerDeleteById(requestParameters: ReviewControllerDeleteByIdRequest): Promise<void> {
        await this.reviewControllerDeleteByIdRaw(requestParameters);
    }

    /**
     */
    async reviewControllerFindRaw(requestParameters: ReviewControllerFindRequest): Promise<runtime.ApiResponse<Array<ReviewWithRelations>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reviews`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReviewWithRelationsFromJSON));
    }

    /**
     */
    async reviewControllerFind(requestParameters: ReviewControllerFindRequest): Promise<Array<ReviewWithRelations>> {
        const response = await this.reviewControllerFindRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async reviewControllerFindByIdRaw(requestParameters: ReviewControllerFindByIdRequest): Promise<runtime.ApiResponse<ReviewWithRelations>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reviewControllerFindById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reviews/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewWithRelationsFromJSON(jsonValue));
    }

    /**
     */
    async reviewControllerFindById(requestParameters: ReviewControllerFindByIdRequest): Promise<ReviewWithRelations> {
        const response = await this.reviewControllerFindByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async reviewControllerReplaceByIdRaw(requestParameters: ReviewControllerReplaceByIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reviewControllerReplaceById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reviews/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewToJSON(requestParameters.review),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async reviewControllerReplaceById(requestParameters: ReviewControllerReplaceByIdRequest): Promise<void> {
        await this.reviewControllerReplaceByIdRaw(requestParameters);
    }

    /**
     */
    async reviewControllerUpdateByIdRaw(requestParameters: ReviewControllerUpdateByIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reviewControllerUpdateById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reviews/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewPartialToJSON(requestParameters.reviewPartial),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async reviewControllerUpdateById(requestParameters: ReviewControllerUpdateByIdRequest): Promise<void> {
        await this.reviewControllerUpdateByIdRaw(requestParameters);
    }

}
