/* tslint:disable */
/* eslint-disable */
/**
 * server
 * server
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ReviewWithRelations,
    ReviewWithRelationsFromJSON,
    ReviewWithRelationsFromJSONTyped,
    ReviewWithRelationsToJSON,
    UserWithRelations,
    UserWithRelationsFromJSON,
    UserWithRelationsFromJSONTyped,
    UserWithRelationsToJSON,
} from './index';

/**
 * (tsType: RestaurantWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface RestaurantWithRelations
 */
export interface RestaurantWithRelations {
    /**
     *
     * @type {string}
     * @memberof RestaurantWithRelations
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantWithRelations
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof RestaurantWithRelations
     */
    ownerId?: string;
    /**
     *
     * @type {Array<ReviewWithRelations>}
     * @memberof RestaurantWithRelations
     */
    reviews?: Array<ReviewWithRelations>;
    /**
     *
     * @type {UserWithRelations}
     * @memberof RestaurantWithRelations
     */
    owner?: UserWithRelations;
}

export function RestaurantWithRelationsFromJSON(json: any): RestaurantWithRelations {
    return RestaurantWithRelationsFromJSONTyped(json, false);
}

export function RestaurantWithRelationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RestaurantWithRelations {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'reviews': !exists(json, 'reviews') ? undefined : ((json['reviews'] as Array<any>).map(ReviewWithRelationsFromJSON)),
        'owner': !exists(json, 'owner') ? undefined : UserWithRelationsFromJSON(json['owner']),
    };
}

export function RestaurantWithRelationsToJSON(value?: RestaurantWithRelations | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'id': value.id,
        'name': value.name,
        'ownerId': value.ownerId,
        'reviews': value.reviews === undefined ? undefined : ((value.reviews as Array<any>).map(ReviewWithRelationsToJSON)),
        'owner': UserWithRelationsToJSON(value.owner),
    };
}


