declare const Injected = {
<%= injected.map(v => '  ' + v ).join(',\n') %><%= injected.length ? ',' : '    // to be generated...' %>
  Shell: 'Shell' as const,
  router: 'router' as const,
}

declare module '@ram-stack/context' {
  export type PickInjectedDependencies<K> = Pick<InjectedDependencies, K>;

  type InferProps<C> = C extends import('react').ComponentType<infer P> ? P : never;
  type OwnKeys<T, K> = Extract<K, keyof T>;
  // WithOptional inspired by https://github.com/Microsoft/TypeScript/issues/25760#issuecomment-405931434
  type WithOptional<T, K> = Omit<T, OwnKeys<T, K>> & Partial<Pick<T, OwnKeys<T, K>>>;

  type WrappedComponent<T> =
    import('react').ComponentClass<WithOptional<InferProps<T>, keyof InjectedDependencies>, any>;

  export type InjectedDependencies = {
<%= top.map(v => '    ' + v).join(',\n') %><%= top.length ? ',' : '    // to be generated...' %>
    Shell: Shell,
    router: Router,
  };

  type Shell = {
<%= shell.map(v => '    ' + v).join(',\n') %><%= shell.length ? ',' : '    // to be generated...' %>
  };

  type Router = {
    routeConfig: {[route: string]: string}
  }
}
